"""
AKUMA Scanner - –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
–õ–æ–≥–∏–∫–∞ –≤–∑—è—Ç–∞ –∏–∑ script_scaner.sh –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è Python
"""

import asyncio
import logging
import os
import subprocess
import shutil
from typing import Dict, List, Optional

logger = logging.getLogger(__name__)

class ToolsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.tools_paths = {}
        self.go_tools = [
            "github.com/projectdiscovery/httpx/cmd/httpx@latest",
            "github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest", 
            "github.com/jaeles-project/jaeles@latest",
            "github.com/tomnomnom/waybackurls@latest",
            "github.com/tomnomnom/gf@latest"
        ]
        
        self.apt_tools = [
            "nmap", "git", "curl", "wget", "python3", "python3-pip", 
            "ruby", "jq", "whatweb", "build-essential", "libssl-dev"
        ]
        
        self.pip_tools = [
            "requests", "beautifulsoup4", "lxml"
        ]
        
        # –ü—É—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.search_paths = {
            'httpx': ['/usr/local/bin/httpx', '/usr/bin/httpx', '/usr/bin/httpx-toolkit'],
            'nuclei': ['/usr/local/bin/nuclei', '/usr/bin/nuclei', '/go/bin/nuclei'],
            'nmap': ['/usr/bin/nmap', '/usr/local/bin/nmap'],
            'whatweb': ['/usr/bin/whatweb', '/usr/local/bin/whatweb'],
            'wpscan': ['/usr/bin/wpscan', '/usr/local/bin/wpscan', '/var/lib/gems/*/bin/wpscan'],
            'gobuster': ['/usr/bin/gobuster', '/usr/local/bin/gobuster'],
            'nikto': ['/usr/bin/nikto', '/usr/local/bin/nikto'],
            'dirsearch': ['/usr/local/bin/dirsearch', '/opt/dirsearch/dirsearch.py'],
            'testssl': ['/usr/bin/testssl', '/opt/testssl/testssl.sh']
        }
        
        # –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.install_commands = {
            'httpx': 'go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest',
            'nuclei': 'go install -v github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest',
            'whatweb': 'apt install -y whatweb',
            'wpscan': 'gem install wpscan',
            'gobuster': 'apt install -y gobuster',
            'nikto': 'apt install -y nikto',
            'jaeles': 'GO111MODULE=on go install github.com/jaeles-project/jaeles@latest',
            'waybackurls': 'go install github.com/tomnomnom/waybackurls@latest'
        }

    def find_tool(self, tool_name: str) -> Optional[str]:
        """–ù–∞–π—Ç–∏ –ø—É—Ç—å –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É"""
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—É—Ç—è—Ö
        if tool_name in self.search_paths:
            for path in self.search_paths[tool_name]:
                # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ glob-–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è wpscan
                if '*' in path:
                    import glob
                    matches = glob.glob(path)
                    for match in matches:
                        if os.path.exists(match) and os.access(match, os.X_OK):
                            return match
                elif os.path.exists(path) and os.access(path, os.X_OK):
                    return path
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ PATH
        path = shutil.which(tool_name)
        if path:
            return path
            
        return None

    async def run_command(self, command: str, description: str = "") -> tuple:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
        logger.info(f"üîß {description}: {command}")
        
        try:
            process = await asyncio.create_subprocess_shell(
                command,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await process.communicate()
            
            return (
                stdout.decode() if stdout else "",
                stderr.decode() if stderr else "",
                process.returncode
            )
        except Exception as e:
            logger.error(f"‚ùå Command failed: {command} - {str(e)}")
            return "", str(e), 1

    async def install_go_tools(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Go –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        logger.info("üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Go –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Go
        go_path = shutil.which('go')
        if not go_path:
            logger.error("‚ùå Go –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return False
            
        success_count = 0
        for tool in self.go_tools:
            tool_name = os.path.basename(tool).split('@')[0]
            
            if not self.find_tool(tool_name):
                logger.info(f"üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {tool_name}...")
                stdout, stderr, code = await self.run_command(
                    f"go install -v {tool}",
                    f"Installing {tool_name}"
                )
                
                if code == 0:
                    logger.info(f"‚úÖ {tool_name} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    success_count += 1
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {tool_name}: {stderr}")
            else:
                logger.info(f"‚ÑπÔ∏è {tool_name} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                success_count += 1
                
        return success_count == len(self.go_tools)

    async def install_apt_tools(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ APT –ø–∞–∫–µ—Ç–æ–≤"""
        logger.info("üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ APT –ø–∞–∫–µ—Ç–æ–≤...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã
        stdout, stderr, code = await self.run_command(
            "apt update -y",
            "Updating package lists"
        )
        
        if code != 0:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤: {stderr}")
            return False
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã
        apt_packages = " ".join(self.apt_tools)
        stdout, stderr, code = await self.run_command(
            f"apt install -y --no-install-recommends {apt_packages}",
            "Installing APT packages"
        )
        
        return code == 0

    async def install_specialized_tools(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        logger.info("üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        
        success = True
        
        # WPScan —á–µ—Ä–µ–∑ gem
        if not self.find_tool('wpscan'):
            stdout, stderr, code = await self.run_command(
                "gem install wpscan",
                "Installing WPScan"
            )
            if code != 0:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å WPScan")
                success = False
                
        # cloud_enum
        if not os.path.exists("/root/cloud_enum/cloud_enum.py"):
            stdout, stderr, code = await self.run_command(
                "git clone https://github.com/initstring/cloud_enum.git /root/cloud_enum",
                "Cloning cloud_enum"
            )
            if code == 0:
                stdout, stderr, code = await self.run_command(
                    "pip3 install -r /root/cloud_enum/requirements.txt --break-system-packages",
                    "Installing cloud_enum dependencies"
                )
                
        # nuclei-templates-bitrix
        if not os.path.exists("/root/nuclei-templates-bitrix"):
            stdout, stderr, code = await self.run_command(
                "git clone https://github.com/jhonnybonny/nuclei-templates-bitrix.git /root/nuclei-templates-bitrix",
                "Cloning Bitrix Nuclei templates"
            )
            
        # check_bitrix
        if not os.path.exists("/root/check_bitrix/test_bitrix.py"):
            stdout, stderr, code = await self.run_command(
                "git clone https://github.com/k1rurk/check_bitrix.git /root/check_bitrix",
                "Cloning check_bitrix scanner"
            )
            if code == 0:
                stdout, stderr, code = await self.run_command(
                    "pip3 install -r /root/check_bitrix/requirements.txt --break-system-packages",
                    "Installing check_bitrix dependencies"
                )
                
        # testssl
        if not self.find_tool('testssl'):
            stdout, stderr, code = await self.run_command(
                "git clone --depth 1 https://github.com/drwetter/testssl.sh.git /opt/testssl",
                "Cloning testssl"
            )
            if code == 0:
                stdout, stderr, code = await self.run_command(
                    "ln -sf /opt/testssl/testssl.sh /usr/bin/testssl",
                    "Creating testssl symlink"
                )
                
        return success

    async def check_all_tools(self) -> Dict[str, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∏—Ö –ø—É—Ç–µ–π"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        
        tools_status = {}
        required_tools = [
            'nmap', 'httpx', 'nuclei', 'whatweb', 'wpscan', 
            'gobuster', 'nikto', 'jaeles', 'waybackurls'
        ]
        
        for tool in required_tools:
            path = self.find_tool(tool)
            if path:
                tools_status[tool] = path
                logger.info(f"‚úÖ {tool}: {path}")
            else:
                tools_status[tool] = None
                logger.warning(f"‚ùå {tool}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        special_tools = {
            'cloud_enum': '/root/cloud_enum/cloud_enum.py',
            'check_bitrix': '/root/check_bitrix/test_bitrix.py',
            'bitrix_templates': '/root/nuclei-templates-bitrix',
            'testssl': self.find_tool('testssl')
        }
        
        for tool, path in special_tools.items():
            if path and os.path.exists(path):
                tools_status[tool] = path
                logger.info(f"‚úÖ {tool}: {path}")
            else:
                tools_status[tool] = None
                logger.warning(f"‚ùå {tool}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        self.tools_paths = tools_status
        return tools_status

    async def install_missing_tools(self, required_tools: List[str] = None) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        if required_tools is None:
            required_tools = ['nmap', 'httpx', 'nuclei', 'whatweb']
            
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ root
        if os.geteuid() != 0:
            logger.error("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è root –ø—Ä–∞–≤–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏!")
            return False
            
        success = True
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º APT –ø–∞–∫–µ—Ç—ã
            if not await self.install_apt_tools():
                success = False
                
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Go –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            if not await self.install_go_tools():
                success = False
                
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            if not await self.install_specialized_tools():
                success = False
                
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            await self.check_all_tools()
            
            logger.info("üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}")
            return False

    def get_tool_path(self, tool_name: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É"""
        return self.tools_paths.get(tool_name) or self.find_tool(tool_name)

    async def verify_installation(self) -> Dict[str, bool]:
        """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        verification = {}
        
        critical_tools = ['nmap', 'httpx', 'nuclei', 'whatweb']
        
        for tool in critical_tools:
            path = self.get_tool_path(tool)
            if path and os.access(path, os.X_OK):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é
                if tool == 'httpx':
                    stdout, stderr, code = await self.run_command(f"{path} -version", f"Checking {tool}")
                elif tool == 'nuclei':
                    stdout, stderr, code = await self.run_command(f"{path} -version", f"Checking {tool}")
                elif tool == 'nmap':
                    stdout, stderr, code = await self.run_command(f"{path} --version", f"Checking {tool}")
                else:
                    code = 0  # –î–ª—è whatweb –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ
                    
                verification[tool] = code == 0
            else:
                verification[tool] = False
                
        return verification


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
tools_manager = ToolsManager()
