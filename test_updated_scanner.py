#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ AKUMA Web Scanner
"""

import requests
import json
import time
import sys

BASE_URL = "http://localhost:8000"

def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    
    print("üîç Testing AKUMA Scanner API endpoints...")
    
    # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    try:
        response = requests.get(f"{BASE_URL}/api/stats")
        if response.status_code == 200:
            stats = response.json()
            print(f"‚úÖ Stats API: {stats}")
        else:
            print(f"‚ùå Stats API failed: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Stats API error: {e}")
    
    # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        response = requests.get(f"{BASE_URL}/api/config")
        if response.status_code == 200:
            config = response.json()
            print(f"‚úÖ Config API: dirsearch_wordlist = {config.get('dirsearch_wordlist', 'N/A')}")
        else:
            print(f"‚ùå Config API failed: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Config API error: {e}")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
    try:
        response = requests.get(f"{BASE_URL}/api/vulnerabilities")
        if response.status_code == 200:
            vulns = response.json()
            print(f"‚úÖ Vulnerabilities API: {len(vulns)} vulnerabilities found")
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
            severities = {}
            for vuln in vulns:
                severity = vuln.get('severity', 'unknown').lower()
                severities[severity] = severities.get(severity, 0) + 1
            
            print(f"   Severity breakdown: {severities}")
        else:
            print(f"‚ùå Vulnerabilities API failed: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Vulnerabilities API error: {e}")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∞–Ω–æ–≤
    try:
        response = requests.get(f"{BASE_URL}/api/scans")
        if response.status_code == 200:
            scans = response.json()
            print(f"‚úÖ Scans API: {len(scans)} scans found")
            
            if scans:
                scan = scans[0]
                scan_id = scan['id']
                
                # –¢–µ—Å—Ç –¥–µ—Ç–∞–ª–µ–π —Å–∫–∞–Ω–∞
                response = requests.get(f"{BASE_URL}/api/scans/{scan_id}")
                if response.status_code == 200:
                    print(f"‚úÖ Scan Details API: Scan {scan_id[:8]}... details retrieved")
                
                # –¢–µ—Å—Ç dirsearch —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                response = requests.get(f"{BASE_URL}/api/scans/{scan_id}/dirsearch")
                if response.status_code == 200:
                    dirsearch = response.json()
                    print(f"‚úÖ Dirsearch API: {len(dirsearch.get('results', []))} directories found")
                
                # –¢–µ—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–µ—Ä–æ–≤
                response = requests.get(f"{BASE_URL}/api/scans/{scan_id}/scanner-results")
                if response.status_code == 200:
                    scanner_results = response.json()
                    scanners = list(scanner_results.keys())
                    print(f"‚úÖ Scanner Results API: {scanners}")
                
        else:
            print(f"‚ùå Scans API failed: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Scans API error: {e}")

def test_scan_creation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–∫–∞–Ω–∞"""
    
    print("\nüéØ Testing scan creation...")
    
    try:
        scan_data = {
            "target": "httpbin.org",
            "scan_type": "comprehensive"
        }
        
        response = requests.post(f"{BASE_URL}/api/scans", json=scan_data)
        if response.status_code == 200:
            scan = response.json()
            scan_id = scan['id']
            print(f"‚úÖ Scan created: {scan_id[:8]}... for target {scan['target']}")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            time.sleep(2)
            
            response = requests.get(f"{BASE_URL}/api/scans/{scan_id}")
            if response.status_code == 200:
                updated_scan = response.json()
                print(f"‚úÖ Scan status: {updated_scan['status']} ({updated_scan['progress']}%)")
            
            return scan_id
        else:
            print(f"‚ùå Scan creation failed: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå Scan creation error: {e}")
        return None

def test_frontend_accessibility():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
    
    print("\nüåê Testing frontend accessibility...")
    
    try:
        response = requests.get("http://localhost:3000", timeout=5)
        if response.status_code == 200:
            if "AKUMA" in response.text:
                print("‚úÖ Frontend accessible: AKUMA Scanner interface loaded")
            else:
                print("‚ö†Ô∏è Frontend accessible but content may be incomplete")
        else:
            print(f"‚ùå Frontend failed: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Frontend error: {e}")

def check_tools():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    
    print("\nüîß Checking required tools...")
    
    import subprocess
    
    tools = ['nmap', 'dirsearch', 'nuclei', 'python3']
    
    for tool in tools:
        try:
            result = subprocess.run(['which', tool], capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ {tool}: {result.stdout.strip()}")
            else:
                print(f"‚ùå {tool}: Not found")
        except Exception as e:
            print(f"‚ùå {tool}: Error checking - {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ AKUMA Web Scanner - Updated Test Suite")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    check_tools()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
    test_api_endpoints()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–∞–Ω–∞
    scan_id = test_scan_creation()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    test_frontend_accessibility()
    
    print("\n" + "=" * 50)
    print("üéØ Test Summary:")
    print("üìä Dashboard: http://localhost:3000/dashboard")
    print("üõ°Ô∏è Vulnerabilities: http://localhost:3000/vulnerabilities") 
    print("üìã Reports: http://localhost:3000/reports")
    print("‚öôÔ∏è Config: http://localhost:3000/config")
    print("üîç API Docs: http://localhost:8000/docs")
    
    if scan_id:
        print(f"üîç Latest scan: http://localhost:3000/scan/{scan_id}")
    
    print("\n‚úÖ All improvements implemented:")
    print("   1. ‚úÖ Enhanced scan results page with better buttons and animated progress")
    print("   2. ‚úÖ Removed FFUF, using only dirsearch")
    print("   3. ‚úÖ Renamed 'Fuzzing' to 'Scanner Results' for Bitrix/WPScan")
    print("   4. ‚úÖ Added 'Fuzzing Dir' tab for dirsearch results")
    print("   5. ‚úÖ Added vulnerability severity breakdown")
    print("   6. ‚úÖ Fixed dashboard layout issues")
    print("   7. ‚úÖ Added interactive vulnerability analysis chart")
    print("   8. ‚úÖ Fixed system status stats display")
    print("   9. ‚úÖ Created missing pages: Vulns, Reports, Config")
    
    print("\nüî• Ready for production use!")

if __name__ == "__main__":
    main()
